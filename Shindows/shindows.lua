local shin = require("shin32")
function run()
	local draw = require("OCX/OCDraw")
	local shin = require("shin32")
	local event = require("event")
	local ctx = draw.newContext(0, 0, 161, 51)
	local canvas = draw.canvas(ctx)

	local windows = shin.windowingSystem()
	local test = shin.newWindow()
	local taskBar = shin.newWindow()
	canvas.fillRect(1, 1, 160, 50, 0xAAAAAA)
	windows.setCanvas(canvas)
	windows.setUndecorated(taskBar, true)
	windows.setPosition(taskBar, 0, 50)
	windows.setSize(taskBar, 160, 1)
	windows.setTitle(test, "Test Window")
	windows.renderWindow(test, canvas)
	windows.renderWindow(taskBar, canvas)
	function w(name, addr, x, y, button, player)
		local wx, wy = windows.getPosition(test)
		local ww, wh = windows.getSize(test)
		canvas.fillRect(wx, wy, ww, wh, 0xAAAAAA)
		windows.setPosition(test, x, y)
		windows.renderWindow(test, canvas)
		--windows.renderWindow(taskBar, canvas)
		canvas.drawText(1, 1, "ram: " .. (((computer.totalMemory() - computer.freeMemory()) / computer.totalMemory()) * 100).. "%, free: " .. (computer.freeMemory() / 1024) .. "K", 0xFFFFFF)
		draw.drawContext(ctx)
	end
	event.listen("touch", w)
	event.listen("drag", w)
	draw.drawContext(ctx)
	coroutine.yield()
end

shin.newProcess("Shindows Main Process", run)

while true do
	shin.scheduler()
end