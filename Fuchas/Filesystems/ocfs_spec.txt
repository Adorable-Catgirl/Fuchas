NOTE THAT A CORRECT IMPLEMENTATION SHOULDN'T RELY ON SECTOR SIZE FOR ENTRIES, REMEMBER SECTORS SIZE CAN VARY

([CODE] is before filesystem header+data to ensure compatibility with most of BIOS supporting unmanaged mode)
Also, with 2 bytes for default logical sector position, "only" 32 MiB can be used
so, if a file/directory is created after all 65535 addresses are used,
due to some I/O logic, it will revert to 0, that will hopefully
stay ok, but if it's a file or a directory with more than 2 childrens,
or if we create a new one, it will erase root directory, and make the fs unusable :|
For this reason, i would recommend people which implement OCFS to use only the first 32 MiB of the drive.

Numbers are ALWAYS little-endian

Default Logical Sector Size (SS): 512
Default Logical Sector Offset (SO): 1031
Content Address (CA) -> Physical Address: CA * SS + SO

MFSR (Master File System Record):

[CODE] - 1024 bytes ( only 512 used by advancedLoader :( )
OCFS1 - 5 bytes
[DIR] - unsigned short (Root Directory)
Total MFSR size (without padding and code): 8 bytes

Directory Entry [DIR]:
D = Directory - 1 byte
SIZE - 2 bytes - size (in bytes) of this directory entry
PARENT - 2 bytes (logical sector number of parent, from 0 to 65535)
NAME - 32 bytes, note: this is not the path, the path is calculated from PARENT, the string is terminated with \0
NUMBER OF CHILDRENS - unsigned short
CHILDRENS (ID + SECTOR) - 3 bytes (1 for ID, 2 for SECTOR) (ID = `D` for directory and ID = `F` for file)
Childrens entry max length: 474 (or 158 childrens per directory)
Size of empty directory: 133

File Entry [FILE]:
F = File - 1 byte
SIZE - 2 bytes - size (in bytes) of this file's fragment
PARENT - 2 bytes - parent of this file (must be a directory)
NAME - 32 bytes
FRAGMENT - 474 bytes
NEXT - 2 bytes - next sector of file entry (with different fragment), equals to 0 if file done